#define PERIPH_BASE           (0x40000000UL)
#define AHB1PERIPH_OFFSET     (0x00020000UL)
#define AHB1PERIPH_BASE       (PERIPH_BASE + AHB1PERIPH_OFFSET)

#define GPIO_OFFSET           (0x0000U)
#define GPIO_BASE             (AHB1PERIPH_BASE + GPIO_OFFSET)


#define RCC_OFFSET            (0x00003800UL)
#define RCC_BASE              (AHB1PERIPH_BASE + RCC_OFFSET)


#define GPIOAEN               (1U<<0)// this means 0b 0000 0000 0000 0000 0000 0000 0000 0001

#define PIN5                  (1U<<5)
#define LED_PIN               PIN5

#define __IO volatile

typedef struct
{
		volatile uint32_t MODER;    /*!< GPIO port mode register,               Address offset: 0x00      */
		volatile uint32_t DUMMY[4];
		volatile uint32_t ODR;      /*!< GPIO port output data register,        Address offset: 0x14      */

}GPIO_typeDef;

typedef struct
{
		volatile uint32_t DUMMY[12];
		volatile uint32_t AHB1ENR;       /*!< RCC AHB1 peripheral clock register,                          Address offset: 0x30 */

}RCC_typeDef;


#define RCC		    ((RCC_TypeDef*) RCC_BASE)
#define GPIOA		((GPIO_TypeDef*)GPIOA_BASE)



int main(void)
{
	//Enable clock access to gpio
	RCC->AHB1ENR |= GPIOAEN;


	//set PA5 as output pin
	GPIOA-> MODER |= 1U<<10;
	GPIOA-> MODER &=~1U<<11; //sets pin 11 to 0

while(1)
{
	//Set PA5 high
//	GPIOA_OD_R |= PIN5;

	//toggle led
	GPIOA-> ODR ^= PIN5;
	for (int i = 0; i<100000; i++){
		// do nothing, just waste time (for delay)

	}

}
}
